结构和层叠

每个合法的html文档都会生成一个结构树(dom),正是因为这一点，后代选择器才能其作用，这也是css另一个重要方面-继承的核心

若多个选择器都匹配了同一个元素的相同的属性，这时css该应用哪个选择器呢？
答案就在于每个选择器的特殊性，对于每个选择器，用户代理会计算选择器的特殊性，并将这个特殊性附加到选择器的各个声明，那么有最高特殊性的声明就会胜出。

选择器的特殊性由选择器本身的组件确定，特殊性值表述为4个部分，如：0.0.0.0  ， 一个选择器的具体特殊性如下确定：
1. 对于选择器中给定的各个id属性值，加 0,1,0,0
2. 对于选择器中给定的各个类属性值、属性、伪类，加 0,0,1,0
3. 对于选择器中给定的各个元素和伪元素，加 0,0,0,1
4. 结合符和通配选择器对特殊性没有任何贡献，其特殊性为 0,0,0,0
5. 内联样式的特殊性比其他声明的特殊性都高，为 1,0,0,0

重要性：有时某个声明可能非常重要，超过了其他声明，则可以在这些声明的结束分号之前插入 ！important 来标志 
       p.dark {color:#333 !importan; background:white;} 如果一个重要声明和一个非重要声明冲突，胜出的总是重要声明，注意!important的放置
       位置，否则整个声明都将无效。
       
继承：基于继承机制，样式不仅应用到指定的元素，还会应用到它的后代元素，不过并不是所有样式都有继承性。

因为通配选择器适用于所有元素，而且有0特殊性，而继承值根本没有特殊性，因此通配选择器的特殊性高于继承

层叠：如果特殊性相同的两个规则同时应用到同一个元素会怎么样呢？

首先要看权重：在声明权重方面要考虑5级，其由大到小的顺序依次是：
1.读者的重要声明
2.创作人员的重要声明
3.创作人员的正常声明
4.读者的正常声明
5.用户代理声明

若权重相同在考虑特殊性，特殊性规则就是前面将的那些

若前两者都相同，再考虑顺序，顺序越往后，优先级越高。
从这里也就可以解释为什么要按 :link , :visited , :hover , :active 的顺序了，若 :link 排在:active的后面，则 :active 会一直被忽略，
将 :visited 放在 :active 后面也会产生同样的效果。不过 :link , :visited 之间的顺序可以随意放置，因为他们是完全对立的，因此不会相互影响。

css中文名-层叠样式表，关于层叠的理解，首先因为dom，层是很容易理解的，那么叠呢？我认为叠应该是叠加的意思，哪里叠加了呢，首先由于继承机制，好多子元素都
已经继承了来自父元素的属性，然后当我们再设置这些子元素的属性时，就会出现重叠，这也就是重叠的由来。


       

